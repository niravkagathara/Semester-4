import 'dart:io';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class MyDatabase {

  Future<Database> initDatabase() async {
    Directory appDocDir = await getApplicationDocumentsDirectory();
    String databasePath = join(appDocDir.path, 'data.db');
    return await openDatabase(databasePath);
  }

  Future<bool> copyPasteAssetFileToRoot() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, "data.db");

    if (FileSystemEntity.typeSync(path) == FileSystemEntityType.notFound) {
      ByteData data =
      await rootBundle.load(join('assets/database', 'data.db'));
      List<int> bytes =
      data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);
      await File(path).writeAsBytes(bytes);
      return true;
    }
    return false;
  }

  Future<List<Map<String, dynamic>>> getDetails() async {
    Database db = await initDatabase();
    List<Map<String, dynamic>> userList = await db.rawQuery(
        "select * from Product");
    return userList;
  }

  Future<int> insertRecord(Map<String, Object?> map) async {
    Database db = await initDatabase();
    int insert = await db.insert("Product", map);
    return insert;
  }

  Future<int> deleteUser(id) async {
    Database db = await initDatabase();
    var res = await db.delete("Product", where: "id = ?", whereArgs: [id]);
    return res;
  }

  Future<int> editUser(Map<String, Object?> map, id) async {
    Database db = await initDatabase();

    var res = await db.update(
        "Product", map, where: "id = ?", whereArgs: [id]);
    return res;
  }
}

//second method
// Future<Database> initDatabase() async {
//   return await openDatabase(
//     join(await getDatabasesPath(), 'MyDatabase.db'),
//     version: 2,
//     onCreate: (db, version) {
//       db.execute(
//           'CREATE TABLE Tbl_User(UserId INTEGER PRIMARY KEY AUTOINCREMENT, UserName TEXT)');
//     },
//     onUpgrade: (db, oldVersion, newVersion) {
//       db.execute(
//           'CREATE TABLE Tbl_User(UserId INTEGER PRIMARY KEY AUTOINCREMENT, UserName TEXT)');
//     },
//   );
// }
//
// Future<int> insertUserDetailInTblUser({required userName}) async {
//   Database db = await initDatabase();
//   Map<String, dynamic> map = {};
//   map['UserName'] = userName;
//   int pk = await db.insert('Tbl_User', map);
//   return pk;
// }
//
// Future<int> updateUserDetailInTblUser({required userName,required userId}) async {
//   Database db =await initDatabase();
//   Map<String,dynamic> map = {};
//   map['UserName'] = userName;
//   int pk = await db.update('Tbl_User', map,where: 'UserId = ?', whereArgs: [userId]);
//   return pk;
// }
//
// Future<List<Map<String, dynamic>>> getUserListFromTblUser() async {
//   Database db = await initDatabase();
//   List<Map<String, dynamic>> userList =
//   await db.rawQuery('SELECT * FROM Tbl_User');
//   return userList;
// }
//
// Future<int> deleteUserFromTblUser({required userId}) async {
//   Database db = await initDatabase();
//   int pk =
//   await db.delete('Tbl_User', where: 'UserId = ?', whereArgs: [userId]);
//   return pk;
// }


import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

import 'database/my_database.dart';

class adduser extends StatefulWidget {
  Map<String,Object?>? map;
  adduser(map){
    this.map = map;
  }

  @override
  State<adduser> createState() => _adduserState();
}

class _adduserState extends State<adduser> {
  var nameController = TextEditingController();
  void initState(){
    nameController.text=widget.map==null?'':widget.map!["name"].toString();

  }
  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        appBar: AppBar(title: Text("add data")),
        body: SafeArea(
          child: Card(
            child: Column(
              children: [
                Container(
                  child: TextFormField(
                    controller: nameController,
                    decoration: InputDecoration(hintText: "Enter User Name"),
                  ),
                ),
                Center(
                  child: Container(
                    child: ElevatedButton(
                      onPressed: () async {
                        // insertDB()
                        //     .then((value) => Navigator.of(context).pop(true))
                        //     .then(
                        //   (value) {
                        //     return User_list();
                        //   },
                        // );
                        if(widget.map==null){
                          await insertDB().then((value) => Navigator.of(context).pop(true));
                        }
                        else{
                          await editUser(widget.map!["id"].toString()).then((value) => Navigator.of(context).pop(true));
                        }
                      },
                      child: Text("Submit"),
                    ),
                  ),
                )
              ],
            ),
          ),
        ),
      ),
    );
  }

  Future<int> insertDB() async {
    Map<String, Object?> map = Map<String,Object?>();
    map["name"] = nameController.text;
    // map["Name"];
    var res = await MyDatabase().insertRecord(map);
    return res;
  }
  Future<int> editUser(id) async {
    Map<String, Object?> map = Map<String, Object?>();
    map["name"]=nameController.text;
    // map["CityId"]=cityIdController.text;

    var res = await MyDatabase().editUser(map, id);
    return res;
  }
}



// import 'package:database_demo/Dats_Entry.dart';
import 'package:database_demo/add_user.dart';
import 'package:database_demo/database/my_database.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

class User_list extends StatefulWidget {
  @override
  State<User_list> createState() => _User_listState();
}

class _User_listState extends State<User_list> {
  var db = MyDatabase();
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('list')),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.add),
        backgroundColor: Colors.white70,
        onPressed: () {
          Navigator.of(context).push(
            MaterialPageRoute(
              builder: (context) {
                return adduser(null);
                // return EnterDetail(Detail: null,);
              },
            ),
          ).then((value){
            if(value==true){
              setState(() {

              });
            }
          } );
        },
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,

      body: FutureBuilder(
        future: db.copyPasteAssetFileToRoot(),
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            return FutureBuilder(
                future: db.getDetails(),
                builder: (context, snapshotList) {
                  if (snapshotList.hasData ) {
                    return ListView.builder(
                      itemBuilder: (context, index) {
                        return Card(
                          elevation: 10,
                          child: Container(
                            child: Row(
                              children: [
                                Expanded(child: Text(snapshotList.data![index]['name'].toString())),
                                Container(
                                  child: IconButton(onPressed: () async {
                                    await MyDatabase().deleteUser(snapshotList.data![index]["id"]).then((value) {setState(() {});});

                                  }, icon: Icon(Icons.delete)),
                                ),
                                Container(
                                  child: TextButton(
                                    child: Icon(Icons.edit),
                                    onPressed: () async {
                                      Navigator.of(context).push(MaterialPageRoute(builder: (context) {
                                        return adduser(snapshotList.data![index]);
                                      },)).then((value) {
                                        setState(() {

                                        });
                                      });

                                    },
                                  ),
                                )

                              ],
                            ),
                          ),
                        );
                      },
                      itemCount: snapshotList.data!.length,
                    );
                  }
                  else {
                    return CircularProgressIndicator();
                  }
                });
          } else {
            return CircularProgressIndicator();
          }
        },
      ),
    );
  }
}
